import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.93aafbf2.js";const h=JSON.parse('{"title":"桌面应用程序","description":"","frontmatter":{},"headers":[],"relativePath":"front/electron.md","filePath":"front/electron.md"}'),e={name:"front/electron.md"},p=l(`<h1 id="桌面应用程序" tabindex="-1">桌面应用程序 <a class="header-anchor" href="#桌面应用程序" aria-label="Permalink to &quot;桌面应用程序&quot;">​</a></h1><p>在项目中可能会有构建桌面应用程序的需求，在不改变现有前端项目结构的情况下使用 <a href="https://github.com/alex8088/electron-vite" target="_blank" rel="noreferrer">electron-vite</a> 构建桌面应用程序。代码在 <a href="https://github.com/haiweilian/vivy-nest-admin/tree/electron" target="_blank" rel="noreferrer">electron</a> 单独分支。</p><h2 id="新增代码" tabindex="-1">新增代码 <a class="header-anchor" href="#新增代码" aria-label="Permalink to &quot;新增代码&quot;">​</a></h2><p>新增 electron 文件夹以及相关的代码。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">// vivy-react/electron</span></span>
<span class="line"><span style="color:#e1e4e8;">├── electron</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── build</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── main // 主进程</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── preload // 预加载脚本</span></span>
<span class="line"><span style="color:#e1e4e8;">│   └── resources // 静态资源</span></span>
<span class="line"><span style="color:#e1e4e8;">├── electron-builder.yml // electron-builder 配置</span></span>
<span class="line"><span style="color:#e1e4e8;">├── electron.vite.config.ts // electron-vite 配置</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">// vivy-react/electron</span></span>
<span class="line"><span style="color:#24292e;">├── electron</span></span>
<span class="line"><span style="color:#24292e;">│   ├── build</span></span>
<span class="line"><span style="color:#24292e;">│   ├── main // 主进程</span></span>
<span class="line"><span style="color:#24292e;">│   ├── preload // 预加载脚本</span></span>
<span class="line"><span style="color:#24292e;">│   └── resources // 静态资源</span></span>
<span class="line"><span style="color:#24292e;">├── electron-builder.yml // electron-builder 配置</span></span>
<span class="line"><span style="color:#24292e;">├── electron.vite.config.ts // electron-vite 配置</span></span></code></pre></div><p>现有的前端项目做为渲染进程的内容做兼容处理。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vivy-react/config/config.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#F97583;">@name</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">Electron集成兼容配置</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  history: { type: </span><span style="color:#9ECBFF;">&#39;hash&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  outputPath: </span><span style="color:#9ECBFF;">&#39;dist/renderer&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  publicPath: p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vivy-react/config/config.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * </span><span style="color:#D73A49;">@name</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">Electron集成兼容配置</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#24292E;">  history: { type: </span><span style="color:#032F62;">&#39;hash&#39;</span><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;">  outputPath: </span><span style="color:#032F62;">&#39;dist/renderer&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  publicPath: p<wbr>rocess.env.</span><span style="color:#005CC5;">NODE_ENV</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;production&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="开发构建" tabindex="-1">开发构建 <a class="header-anchor" href="#开发构建" aria-label="Permalink to &quot;开发构建&quot;">​</a></h2><p>在开发环境需要启动 <code>umi</code> 服务和 <code>electron</code> 服务。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">umi</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">electron:dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">electron</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">umi</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">electron:dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">electron</span></span></code></pre></div><p>在开发环境中 <code>electron</code> 通过 <code>loadURL</code> 加载内容做到渲染进程热更新。构建环境中加载构建后的本地渲染进程文件。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vivy-react/electron/main/index.ts</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (is.dev) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mainWindow.</span><span style="color:#B392F0;">loadURL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;http://localhost:8000&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mainWindow.</span><span style="color:#B392F0;">loadFile</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;../renderer/index.html&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vivy-react/electron/main/index.ts</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (is.dev) {</span></span>
<span class="line"><span style="color:#24292E;">  mainWindow.</span><span style="color:#6F42C1;">loadURL</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;http://localhost:8000&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  mainWindow.</span><span style="color:#6F42C1;">loadFile</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(__dirname, </span><span style="color:#032F62;">&#39;../renderer/index.html&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>构建应用程序在对应的平台执行命令。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;electron:build:win&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;max build &amp;&amp; electron-vite build &amp;&amp; electron-builder --win --config&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;electron:build:mac&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;max build &amp;&amp; electron-vite build &amp;&amp; electron-builder --mac --config&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;electron:build:linux&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;max build &amp;&amp; electron-vite build &amp;&amp; electron-builder --linux --config&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;electron:build:win&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;max build &amp;&amp; electron-vite build &amp;&amp; electron-builder --win --config&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;electron:build:mac&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;max build &amp;&amp; electron-vite build &amp;&amp; electron-builder --mac --config&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;electron:build:linux&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;max build &amp;&amp; electron-vite build &amp;&amp; electron-builder --linux --config&quot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="相关源码" tabindex="-1">相关源码 <a class="header-anchor" href="#相关源码" aria-label="Permalink to &quot;相关源码&quot;">​</a></h2><ul><li><p><a href="https://github.com/haiweilian/vivy-nest-admin/tree/electron" target="_blank" rel="noreferrer">https://github.com/haiweilian/vivy-nest-admin/tree/electron</a></p></li><li><p><a href="https://github.com/haiweilian/vivy-nest-admin/tree/electron/vivy-react/electron" target="_blank" rel="noreferrer">https://github.com/haiweilian/vivy-nest-admin/tree/electron/vivy-react/electron</a></p></li></ul>`,16),o=[p];function t(c,r,i,y,E,d){return n(),a("div",null,o)}const m=s(e,[["render",t]]);export{h as __pageData,m as default};
